// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models_gen

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type PayloadEntity interface {
	IsPayloadEntity()
}

type Admin struct {
	ID       int    `json:"id" db:"id"`
	Sn       string `json:"sn" db:"sn"`
	Name     string `json:"name" db:"name"`
	Account  string `json:"account" db:"account"`
	Password string `json:"password" db:"password"`
	IsSuper  *bool  `json:"isSuper" db:"isSuper"`
}

type InputSetProduct struct {
	ID     *string           `json:"id" db:"id"`
	Name   string            `json:"name" db:"name"`
	Desp   string            `json:"desp" db:"desp"`
	Images []*graphql.Upload `json:"images" db:"images"`
}

type Member struct {
	ID   string `json:"id" db:"id"`
	Name string `json:"name" db:"name"`
}

type OpendIds struct {
	MemberID int       `json:"member_id" db:"member_id"`
	OpenType *OpenType `json:"open_type" db:"open_type"`
	OpendID  *string   `json:"opend_id" db:"opend_id"`
}

type SetProductPayload struct {
	Code int    `json:"code" db:"code"`
	Msg  string `json:"msg" db:"msg"`
	Data string `json:"data" db:"data"`
}

func (SetProductPayload) IsPayloadEntity() {}

type OpenType string

const (
	OpenTypeFb     OpenType = "FB"
	OpenTypeGoogle OpenType = "GOOGLE"
)

var AllOpenType = []OpenType{
	OpenTypeFb,
	OpenTypeGoogle,
}

func (e OpenType) IsValid() bool {
	switch e {
	case OpenTypeFb, OpenTypeGoogle:
		return true
	}
	return false
}

func (e OpenType) String() string {
	return string(e)
}

func (e *OpenType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OpenType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OpenType", str)
	}
	return nil
}

func (e OpenType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
